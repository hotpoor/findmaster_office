// Generated by CoffeeScript 1.12.7
(function() {
  var Hs, root;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.Hs || (root.Hs = {});

  Hs = root.Hs;

  $(function() {
    var plugin_im_base_max_offset, plugin_im_base_max_period, plugin_im_base_z_index, plugin_im_client_x, plugin_im_client_y, plugin_im_h, plugin_im_html, plugin_im_is_expanded, plugin_im_is_expanding, plugin_im_is_moved, plugin_im_is_started, plugin_im_latest_room_ids, plugin_im_max_offset, plugin_im_max_rooms, plugin_im_max_x, plugin_im_max_y, plugin_im_min_x, plugin_im_min_y, plugin_im_r, plugin_im_start_x, plugin_im_start_y, plugin_im_target_room_id, plugin_im_time, plugin_im_touch_id, plugin_im_w, plugin_im_x, plugin_im_y;
    console.log("this is plugin im coffee");
    plugin_im_touch_id = null;
    plugin_im_is_expanded = false;
    plugin_im_is_expanding = false;
    plugin_im_client_x = null;
    plugin_im_client_y = null;
    plugin_im_is_started = false;
    plugin_im_is_moved = false;
    plugin_im_start_x = null;
    plugin_im_start_y = null;
    plugin_im_max_offset = 0;
    plugin_im_time = null;
    plugin_im_r = 30;
    plugin_im_w = window.innerWidth;
    plugin_im_h = window.innerHeight;
    plugin_im_min_x = plugin_im_r - 5;
    plugin_im_max_x = plugin_im_w - plugin_im_min_x;
    plugin_im_min_y = plugin_im_r + 5;
    plugin_im_max_y = plugin_im_h - plugin_im_min_y;
    plugin_im_x = plugin_im_max_x;
    plugin_im_y = plugin_im_min_y + 80;
    plugin_im_base_max_offset = 30;
    plugin_im_base_max_period = 150;
    plugin_im_base_z_index = 2147483647;
    plugin_im_latest_room_ids = ["logo", "logo1", "logo2", "logo3"];
    plugin_im_target_room_id = null;
    plugin_im_max_rooms = 4;
    plugin_im_html = "<div class=\"plugin_im_heads hide\">\n    <div class=\"plugin_im_head plugin_im_logo\" data-im-room-id=\"logo\"></div>\n    <div class=\"plugin_im_head plugin_im_logo\" data-im-room-id=\"logo1\"></div>\n    <div class=\"plugin_im_head plugin_im_logo\" data-im-room-id=\"logo2\"></div>\n    <div class=\"plugin_im_head plugin_im_logo\" data-im-room-id=\"logo3\"></div>\n</div>\n";
    $("body").append(plugin_im_html);
    root.load_plugin_im_chats = function() {
      return $.ajax({
        url: "/api/plugin/im/chats",
        data: {
          app: FINDMASTER_APP
        },
        dataType: 'json',
        type: 'POST',
        success: function(data) {
          return console.log(data);
        },
        error: function(data) {
          return console.log(data);
        }
      });
    };
    $("body").on("click", ".plugin_im_heads>.plugin_im_head", function(e) {
      var old_room_id;
      if (e.timeStamp - plugin_im_time < plugin_im_base_max_period) {
        return;
      }
      console.log("plugin_im_heads plugin_im_head click plugin_im_is_expanded", plugin_im_is_expanded);
      if (plugin_im_is_expanded) {
        old_room_id = plugin_im_target_room_id;
        plugin_im_target_room_id = $(this).attr("data-im-room-id");
        if (old_room_id === plugin_im_target_room_id) {
          return onHeadsClickWhenExpanded();
        }
      }
    });
    root.plugin_im_run = function() {
      $(".plugin_im_heads").removeClass("hide");
      return onHeadsMoveEnd();
    };
    $(window).on("load", function(e) {
      return plugin_im_run();
    });
    root.moveHeads = function(_x, _y) {
      var el, els, i, j, len1, num;
      els = [];
      num = 0;
      for (j = 0, len1 = plugin_im_latest_room_ids.length; j < len1; j++) {
        i = plugin_im_latest_room_ids[j];
        el = $(".plugin_im_heads").children("[data-im-room-id=" + i + "]")[0];
        el.style.zIndex = plugin_im_base_z_index - num;
        num += 1;
        els.push(el);
        console.log("moveHeads plugin_im_latest_room_ids", el);
      }
      _callLater(els, function(el, index) {
        return setTransform(el, _x + 4 * index, _y);
      });
      plugin_im_x = _x;
      return plugin_im_y = _y;
    };
    root.moveHeadsTogether = function(_x, _y) {
      var el, els, i, j, len1, num;
      els = [];
      num = 0;
      for (j = 0, len1 = plugin_im_latest_room_ids.length; j < len1; j++) {
        i = plugin_im_latest_room_ids[j];
        el = $(".plugin_im_heads").children("[data-im-room-id=" + i + "]")[0];
        el.style.zIndex = plugin_im_base_z_index - num;
        els.push(el);
        num += 1;
        setTransform(el, _x + 4 * i, _y);
      }
      plugin_im_x = _x;
      return plugin_im_y = _y;
    };
    root.onHeadsMoveEnd = function() {
      var el, els, i, j, len1, num;
      els = [];
      num = 0;
      for (j = 0, len1 = plugin_im_latest_room_ids.length; j < len1; j++) {
        i = plugin_im_latest_room_ids[j];
        el = $(".plugin_im_heads").children("[data-im-room-id=" + i + "]")[0];
        el.style.zIndex = plugin_im_base_z_index - num;
        els.push(el);
        num += 1;
      }
      _callLater(els, function(el, index) {
        console.log("onHeadsMoveEnd plugin_im_latest_room_ids", el);
        $(el).addClass("transition");
        return setTransform(el, collapsedX(index), collapsedY(index));
      });
      return plugin_im_x = plugin_im_max_x;
    };
    root.setTransform = function(el, x, y) {
      var value;
      value = 'translate3d(' + x + 'px,' + y + 'px,0)';
      el.style.transform = value;
      return el.style.webkitTransform = value;
    };
    root.collapsedX = function(i) {
      return plugin_im_max_x + 4 * i;
    };
    root.collapsedY = function(i) {
      return plugin_im_y;
    };
    root.expandedX = function(i) {
      return plugin_im_w - plugin_im_r * (2 * i + 1) - 5 * (i + 1);
    };
    root.expandedY = function(i) {
      return plugin_im_r + 10;
    };
    root._requestFrame = function(n, callback) {
      if (n > 0) {
        return requestAnimationFrame(function() {
          return _requestFrame(n - 1, callback);
        });
      } else if (n === 0) {
        return callback();
      }
    };
    root._callLater = function(els, callback) {
      var _call, len;
      len = els.length;
      if (len) {
        _call = function(i) {
          callback(els[i], i);
          i += 1;
          if (i < len) {
            return _requestFrame(3, function() {
              return _call(i);
            });
          }
        };
        return _call(0);
      }
    };
    root.onHeadsClickWhenCollapsed = function() {
      var el, j, len1, ref;
      ref = $(".plugin_im_heads").children();
      for (j = 0, len1 = ref.length; j < len1; j++) {
        el = ref[j];
        $(el).addClass("transition");
      }
      if (!plugin_im_is_expanded) {
        plugin_im_is_expanded = true;
        plugin_im_target_room_id = plugin_im_latest_room_ids[0];
        $(".plugin_im_heads").addClass("expanded");
        return setHeadsStyleExpanded();
      }
    };
    root.onHeadsClickWhenExpanded = function() {
      var el, j, len1, ref;
      ref = $(".plugin_im_heads").children();
      for (j = 0, len1 = ref.length; j < len1; j++) {
        el = ref[j];
        $(el).addClass("transition");
      }
      if (plugin_im_is_expanded) {
        plugin_im_is_expanded = false;
        plugin_im_target_room_id = plugin_im_latest_room_ids[0];
        $(".plugin_im_heads").removeClass("expanded");
        return setHeadsStyleCollapsed();
      }
    };
    root.setHeadsStyleCollapsed = function() {
      var el, i, j, len1, num, results;
      console.log("收起");
      num = 0;
      results = [];
      for (j = 0, len1 = plugin_im_latest_room_ids.length; j < len1; j++) {
        i = plugin_im_latest_room_ids[j];
        el = $(".plugin_im_heads").children("[data-im-room-id=" + i + "]")[0];
        el.style.zIndex = plugin_im_base_z_index - num;
        setTransform(el, collapsedX(num), collapsedY(num));
        results.push(num += 1);
      }
      return results;
    };
    root.setHeadsStyleExpanded = function() {
      var el, i, j, len1, num, results;
      console.log("展开");
      num = 0;
      results = [];
      for (j = 0, len1 = plugin_im_latest_room_ids.length; j < len1; j++) {
        i = plugin_im_latest_room_ids[j];
        el = $(".plugin_im_heads").children("[data-im-room-id=" + i + "]")[0];
        el.style.zIndex = plugin_im_base_z_index - num;
        setTransform(el, expandedX(num), expandedY(num));
        results.push(num += 1);
      }
      return results;
    };
    $(window).on("resize", function(e) {
      var old_h;
      old_h = plugin_im_h;
      plugin_im_w = window.innerWidth;
      plugin_im_h = window.innerHeight;
      plugin_im_max_x = plugin_im_w - plugin_im_min_x;
      plugin_im_max_y = plugin_im_h - plugin_im_min_y;
      plugin_im_x = plugin_im_max_x;
      plugin_im_y = plugin_im_y / old_h * plugin_im_h;
      if (plugin_im_is_expanded) {
        return setHeadsStyleExpanded();
      } else {
        return setHeadsStyleCollapsed();
      }
    });
    if (window.navigator.userAgent.indexOf("Mobile") > -1) {
      console.log("Mobile");
      $(".plugin_im_heads").on("touchstart", function(e) {
        var el, els, j, len1, results, touch;
        console.log("plugin_im_heads touchstart");
        if (!plugin_im_is_expanded) {
          console.log("plugin_im_heads touchstart plugin_im_is_expanded", plugin_im_is_expanded);
          e.stopPropagation();
          e.preventDefault();
          plugin_im_is_started = true;
          plugin_im_is_moved = false;
          plugin_im_max_offset = 0;
          plugin_im_time = e.timeStamp;
          touch = e.originalEvent.targetTouches[0];
          plugin_im_touch_id = touch.identifier;
          plugin_im_client_x = touch.clientX;
          plugin_im_client_y = touch.clientY;
          plugin_im_start_x = plugin_im_client_x;
          plugin_im_start_y = plugin_im_client_y;
          els = $(".plugin_im_heads").children();
          results = [];
          for (j = 0, len1 = els.length; j < len1; j++) {
            el = els[j];
            results.push($(el).removeClass("transition"));
          }
          return results;
        }
      });
      $(window).on("touchmove", function(e) {
        var _x, _y, dx, dy, isStarted, touch, x, y;
        if (!plugin_im_is_expanded) {
          console.log("plugin_im_heads window touchmove plugin_im_is_expanded", plugin_im_is_expanded);
          if (plugin_im_is_started) {
            plugin_im_is_moved = true;
            touch = e.originalEvent.targetTouches[0];
            if (touch.identifier === plugin_im_touch_id) {
              x = touch.clientX;
              y = touch.clientY;
              if (Math.abs(x - plugin_im_start_x) > plugin_im_max_offset) {
                plugin_im_max_offset = Math.abs(x - plugin_im_start_x);
              }
              if (Math.abs(y - plugin_im_start_y) > plugin_im_max_offset) {
                plugin_im_max_offset = Math.abs(y - plugin_im_start_y);
              }
              dx = x - plugin_im_client_x;
              dy = y - plugin_im_client_y;
              plugin_im_client_x = x;
              plugin_im_client_y = y;
              _x = plugin_im_x + dx;
              _y = plugin_im_y + dy;
              console.log("_x,_y", _x, _y);
              if (_y < plugin_im_min_y) {
                _y = plugin_im_min_y;
                onHeadsMoveEnd();
                return isStarted = false;
              } else if (_y > plugin_im_max_y) {
                _y = plugin_im_max_y;
                onHeadsMoveEnd();
                return isStarted = false;
              } else {
                if (plugin_im_max_offset > plugin_im_base_max_offset) {
                  return moveHeads(_x, _y);
                } else {
                  return moveHeadsTogether(_x, _y);
                }
              }
            }
          }
        }
      });
      return $(window).on("touchend", function(e) {
        if (!plugin_im_is_expanded) {
          if (plugin_im_is_started) {
            plugin_im_is_started = false;
            plugin_im_is_moved = true;
            if (e.timeStamp - plugin_im_time < plugin_im_base_max_period && plugin_im_max_offset < plugin_im_base_max_offset) {
              plugin_im_is_moved = false;
            }
            console.log("plugin_im_heads window touchend plugin_im_is_expanded plugin_im_is_moved", plugin_im_is_expanded, plugin_im_is_moved);
            if (!plugin_im_is_moved) {
              return onHeadsClickWhenCollapsed();
            } else {
              return onHeadsMoveEnd();
            }
          }
        }
      });
    } else {
      console.log("Desktop pc");
      $(".plugin_im_heads").on("mousedown", function(e) {
        var el, els, j, len1, results, touch;
        console.log("plugin_im_heads touchstart");
        if (!plugin_im_is_expanded) {
          console.log("plugin_im_heads mousedown plugin_im_is_expanded", plugin_im_is_expanded);
          e.stopPropagation();
          e.preventDefault();
          plugin_im_is_started = true;
          plugin_im_is_moved = false;
          plugin_im_max_offset = 0;
          plugin_im_time = e.timeStamp;
          touch = e;
          plugin_im_client_x = touch.clientX;
          plugin_im_client_y = touch.clientY;
          plugin_im_start_x = plugin_im_client_x;
          plugin_im_start_y = plugin_im_client_y;
          els = $(".plugin_im_heads").children();
          results = [];
          for (j = 0, len1 = els.length; j < len1; j++) {
            el = els[j];
            results.push($(el).removeClass("transition"));
          }
          return results;
        }
      });
      $(window).on("mousemove", function(e) {
        var _x, _y, dx, dy, isStarted, touch, x, y;
        if (!plugin_im_is_expanded) {
          console.log("plugin_im_heads window mousemove plugin_im_is_expanded", plugin_im_is_expanded);
          if (plugin_im_is_started) {
            plugin_im_is_moved = true;
            touch = e;
            if (true) {
              x = touch.clientX;
              y = touch.clientY;
              if (Math.abs(x - plugin_im_start_x) > plugin_im_max_offset) {
                plugin_im_max_offset = Math.abs(x - plugin_im_start_x);
              }
              if (Math.abs(y - plugin_im_start_y) > plugin_im_max_offset) {
                plugin_im_max_offset = Math.abs(y - plugin_im_start_y);
              }
              dx = x - plugin_im_client_x;
              dy = y - plugin_im_client_y;
              plugin_im_client_x = x;
              plugin_im_client_y = y;
              _x = plugin_im_x + dx;
              _y = plugin_im_y + dy;
              console.log("_x,_y", _x, _y);
              if (_y < plugin_im_min_y) {
                _y = plugin_im_min_y;
                onHeadsMoveEnd();
                return isStarted = false;
              } else if (_y > plugin_im_max_y) {
                _y = plugin_im_max_y;
                onHeadsMoveEnd();
                return isStarted = false;
              } else {
                if (plugin_im_max_offset > plugin_im_base_max_offset) {
                  return moveHeads(_x, _y);
                } else {
                  return moveHeadsTogether(_x, _y);
                }
              }
            }
          }
        }
      });
      return $(window).on("mouseup", function(e) {
        if (!plugin_im_is_expanded) {
          if (plugin_im_is_started) {
            plugin_im_is_started = false;
            plugin_im_is_moved = true;
            if (e.timeStamp - plugin_im_time < plugin_im_base_max_period && plugin_im_max_offset < plugin_im_base_max_offset) {
              plugin_im_is_moved = false;
            }
            console.log("plugin_im_heads window mouseup plugin_im_is_expanded plugin_im_is_moved", plugin_im_is_expanded, plugin_im_is_moved);
            if (!plugin_im_is_moved) {
              return onHeadsClickWhenCollapsed();
            } else {
              return onHeadsMoveEnd();
            }
          }
        }
      });
    }
  });

}).call(this);
